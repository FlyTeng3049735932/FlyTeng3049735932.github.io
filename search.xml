<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2024/08/16/202408162041/</url>
    <content><![CDATA[<p>这是我的第一篇博客，我以后会在这里分享一些技术，生活或记录学习状况。</p>
<p>同时我也会吸取一些建议或意见，进行修正。</p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的备份与恢复 (mysqldump)</title>
    <url>/2024/08/17/202408170839/</url>
    <content><![CDATA[<h2 id="mysqldump-语法">mysqldump 语法</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] &gt; 脚本.sql</span><br></pre></td></tr></table></figure>
<h3 id="选项">选项</h3>
<table>
<thead>
<tr>
<th>参数名</th>
<th>缩写</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>--host</td>
<td>-h</td>
<td>服务器IP地址</td>
</tr>
<tr>
<td>--port</td>
<td>-P (大写)</td>
<td>服务器端口号</td>
</tr>
<tr>
<td>--password</td>
<td>-p (小写)</td>
<td>MySQL密码</td>
</tr>
<tr>
<td>--databases</td>
<td></td>
<td>指定要备份的数据库</td>
</tr>
<tr>
<td>--all-databases</td>
<td></td>
<td>备份MySQL服务器上的所有数据库</td>
</tr>
<tr>
<td>--compact</td>
<td></td>
<td>压缩模式，产生更少的输出</td>
</tr>
<tr>
<td>--comments</td>
<td></td>
<td>添加注释信息</td>
</tr>
<tr>
<td>--complete-insert</td>
<td></td>
<td>输出完成的插入语句</td>
</tr>
<tr>
<td>--lock-tables</td>
<td></td>
<td>备份前，锁定所有数据库表</td>
</tr>
<tr>
<td>--no-create-db/–no-create-info</td>
<td></td>
<td>禁止生成创建数据库语句</td>
</tr>
<tr>
<td>--force</td>
<td></td>
<td>当出现错误时仍然继续备份操作</td>
</tr>
<tr>
<td>--default-character-set</td>
<td></td>
<td>指定默认字符集</td>
</tr>
<tr>
<td>--add-locks</td>
<td></td>
<td>备份数据库表时锁定数据库表</td>
</tr>
</tbody>
</table>
<h2 id="示例">示例</h2>
<p>如果 -p 选项没有指定密码，那么控制台会等待输入密码</p>
<h3 id="备份所有数据库">备份所有数据库</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p --all-databases &gt; all.sql</span><br></pre></td></tr></table></figure>
<h3 id="备份指定数据库">备份指定数据库</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p test &gt; test.sql</span><br></pre></td></tr></table></figure>
<h3 id="备份指定数据库指定表-多个表以空格间隔">备份指定数据库指定表(多个表以空格间隔)</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p test table1 table2 &gt; test.sql </span><br></pre></td></tr></table></figure>
<h3 id="备份指定数据库排除某些表">备份指定数据库排除某些表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p test --ignore-table=test.table1 --ignore-table=test.table2 &gt; test.sql</span><br></pre></td></tr></table></figure>
<h2 id="恢复命令">恢复命令</h2>
<h3 id="命令行命令">命令行命令</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：在导入备份数据库前，db_name如果没有，是需要创建的； 而且与db_name.sql中数据库名是一样的才可以导入。</span><br><span class="line">mysqladmin -uroot -p create db_name </span><br><span class="line">mysql -uroot -p db_name &lt; /backup/mysqldump/db_name.sql</span><br></pre></td></tr></table></figure>
<h3 id="soure-方法">soure 方法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql &gt; use db_name</span><br><span class="line">mysql &gt; source /backup/db_name.sql</span><br></pre></td></tr></table></figure>
<style>
    table th:nth-child(2){
        width: 5rem;
    }
</style>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySQL</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 的安装与配置 - 1</title>
    <url>/2024/08/18/202408181002/</url>
    <content><![CDATA[<h3 id="下载镜像">下载镜像</h3>
<p>以下内容仅按照我的配置写的，如有不足评论一下。</p>
<p>首先下载Centos7的镜像，这里我用的 <a href="https://mirrors.aliyun.com/centos/">阿里云的镜像</a></p>
<p><img src="1.png" alt=""></p>
<p>进入 7.9.2009/isos/x86_64/，下载 <a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-NetInstall-2009.iso">CentOS-7-x86_64-NetInstall-2009.iso</a></p>
<p><img src="2.png" alt=""></p>
<p>如果打开只有一个 readme 文件，说明这个版本的镜像没有提供下载。</p>
<p><img src="3.png" alt=""></p>
<h3 id="安装">安装</h3>
<p>首先打开 VMware，创建新的虚拟机，这里安装到虚拟机里面 (物理机应该也是一样的)</p>
<p><img src="4.png" alt=""></p>
<p>选择自定义(高级)，然后下一步</p>
<p><img src="5.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<p>这里选择稍后安装操作系统，然后下一步</p>
<p><img src="7.png" alt=""></p>
<p>这里选择Centos7 64位</p>
<p><img src="8.png" alt=""></p>
<p>这里可以给虚拟机起名字。</p>
<p>位置选C盘以外的盘，因为最后生成的虚拟机文件比较大(只有一个C盘当我没说…)</p>
<p><img src="9.png" alt=""></p>
<p>这里可以设置虚拟机的处理器(不懂别瞎选，默认的就行)</p>
<p><img src="10.png" alt=""></p>
<p>这里设置内存(不懂别瞎选，默认的就行)</p>
<p><img src="11.png" alt=""></p>
<p>这里建议选默认的 使用网络地址转换(NAT)</p>
<p><img src="12.png" alt=""></p>
<p>后面的默认推荐就可以</p>
<p><img src="13.png" alt=""><br>
<img src="14.png" alt=""></p>
<p>创建新虚拟磁盘，而后下一步</p>
<p><img src="15.png" alt=""></p>
<p>这里可以设置磁盘大小，也就是虚拟机的硬盘大小</p>
<p>选 将虚拟磁盘存储为单个文件，而后下一步</p>
<p><img src="16.png" alt=""><br>
<img src="17.png" alt=""></p>
<p>完成！</p>
<p><img src="18.png" alt=""><br>
<img src="19.png" alt=""></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 图片资源显示</title>
    <url>/2024/08/18/202408181131/</url>
    <content><![CDATA[<h3 id="安装-hexo-renderer-markdown-it">安装 hexo-renderer-markdown-it</h3>
<p><a href="https://github.com/hexojs/hexo-renderer-markdown-it/">hexo-renderer-markdown-it官网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 如果安装过 hexo-renderer-marked，就卸载</span><br><span class="line"></span><br><span class="line">npm un hexo-renderer-marked</span><br><span class="line"></span><br><span class="line">npm i hexo-renderer-markdown-it</span><br></pre></td></tr></table></figure>
<h3 id="修改-config-yml">修改_config.yml</h3>
<p>将 post_asset_folder 改为true</p>
<p><img src="1.png" alt=""></p>
<h3 id="重新生成静态文件，并运行">重新生成静态文件，并运行</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo server</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>换 yum 源</title>
    <url>/2024/08/19/202408191114/</url>
    <content><![CDATA[<p>备份原有源配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<p>下载国内源配置文件(这里用的是阿里云的仓库)，并移动到源目录里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -O http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">sudo mv Centos-7.repo /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
<p>刷新yum缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure>
<p>检查是否更换成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum repolist</span><br></pre></td></tr></table></figure>
<p>更新软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<p>至此，换源完成~</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
        <tag>配置</tag>
        <tag>config</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>安装并使用 docker-ce</title>
    <url>/2024/08/19/202408191233/</url>
    <content><![CDATA[<h3 id="下载">下载</h3>
<p>从阿里云下载 docker-ce 仓库，并将仓库文件移动到 /etc/yum.repos.d/ 目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo curl -O https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">sudo mv docker-ce.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>
<p>刷新yum缓存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum clean all</span><br><span class="line">sudo yum makecache fast</span><br></pre></td></tr></table></figure>
<p>查看 docker-ce 源是否添加成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list docker-ce</span><br></pre></td></tr></table></figure>
<h3 id="安装">安装</h3>
<p>安装 docker-ce</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce -y</span><br></pre></td></tr></table></figure>
<p>执行命令查看是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p>如果出现这种错误，说明没有运行</p>
<p><img src="1.png" alt=""></p>
<h3 id="docker-的启动与停止">docker 的启动与停止</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动 docker</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"># 守护进程重启</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"># 重启 docker 服务(二选其一即可)</span><br><span class="line">systemctl restart docker</span><br><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line"># 关闭 docker (二选其一即可)</span><br><span class="line">systemctl stop docker</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure>
<h3 id="常用docker命令">常用docker命令</h3>
<h4 id="查看镜像">查看镜像</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<h4 id="搜索镜像">搜索镜像</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure>
<h4 id="拉取镜像">拉取镜像</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure>
<h4 id="按镜像id删除镜像">按镜像id删除镜像</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像id</span><br></pre></td></tr></table></figure>
<h4 id="删除所有镜像">删除所有镜像</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>
<h4 id="查看正在运行的容器">查看正在运行的容器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<h4 id="查看所有容器">查看所有容器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>
<h4 id="查看最后一次运行的容器">查看最后一次运行的容器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure>
<h4 id="查看停止的容器">查看停止的容器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure>
<h4 id="创建容器">创建容器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run</span><br><span class="line"></span><br><span class="line">    -i：表示运行容器</span><br><span class="line"></span><br><span class="line">    -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。交互式</span><br><span class="line"></span><br><span class="line">    --name :为创建的容器命名。</span><br><span class="line"></span><br><span class="line">    -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</span><br><span class="line"></span><br><span class="line">    -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</span><br><span class="line"></span><br><span class="line">    -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</span><br></pre></td></tr></table></figure>
<h4 id="创建并进入容器，退出停止-交互式">创建并进入容器，退出停止(交互式)</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="退出当前容器">退出当前容器</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>
<h4 id="守护式创建容器">守护式创建容器</h4>
<p>创建但不登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure>
<p>创建并登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器名称(或者容器id) /bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="停止与启动容器">停止与启动容器</h4>
<p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称(或者容器id)</span><br></pre></td></tr></table></figure>
<p>启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start 容器名称(或者容器id)</span><br></pre></td></tr></table></figure>
<h4 id="文件拷贝">文件拷贝</h4>
<p>将文件拷贝到容器内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure>
<p>将文件从容器内拷贝出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure>
<h4 id="目录挂载">目录挂载</h4>
<p>在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样就可以通过修改宿主机某个目录的文件从而去影响容器。创建容器添加-v参数 后边为 宿主机目录:容器目录，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos centos:7</span><br></pre></td></tr></table></figure>
<h4 id="迁移与备份">迁移与备份</h4>
<p>将容器保存为镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit 容器名称 镜像名称</span><br></pre></td></tr></table></figure>
<p>将镜像保存为 tar 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o image.tar 镜像名称</span><br></pre></td></tr></table></figure>
<p>恢复镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 恢复之前先删除原有的镜像</span><br><span class="line">docker load -i image.tar</span><br></pre></td></tr></table></figure>
<h4 id="私有仓库搭建与配置">私有仓库搭建与配置</h4>
<p>拉取私有仓库镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>
<p>启动私有仓库容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>
<p>打开浏览器，访问 <code>http://宿主机ip:5000/v2/_catalog</code>，返回{“repositories”:[]}表明私有仓库搭建成功，并且内容为空</p>
<p>修改daemon.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<p>添加或修改以下内容，而后保存退出，此步用于让 docker 信任私有仓库地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;insecure-registries&quot;:[&quot;宿主机ip:5000&quot;]&#125; </span><br></pre></td></tr></table></figure>
<p>重启docker服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h4 id="镜像上传至私有仓库">镜像上传至私有仓库</h4>
<p>标记此镜像为私有仓库的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker tag redis 宿主机ip:5000/redis</span><br></pre></td></tr></table></figure>
<p>再次启动私有仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure>
<p>上传标记的镜像到私有仓库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push 宿主机ip:5000/redis</span><br></pre></td></tr></table></figure>
<h3 id="可能会出现的错误或警告">可能会出现的错误或警告</h3>
<h4 id="Warning-Stopping-docker-service-but-it-can-still-be-activated-by-docker-socket">Warning: Stopping docker.service, but it can still be activated by: docker.socket</h4>
<p>一般出现在停止docker运行的时候，原因是 Docker 在关闭状态下被访问自动唤醒机制，意味如果试图连接到 docker socket，而 docker 服务没有运行，系统将自动启动docker。</p>
<h5 id="解决办法">解决办法</h5>
<h6 id="方法1、-推荐">方法1、(推荐)</h6>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop docker.socket</span><br></pre></td></tr></table></figure>
<h6 id="方法2、">方法2、</h6>
<p>删除docker.socket</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -f /lib/systemd/system/docker.socket</span><br></pre></td></tr></table></figure>
<h4 id="Error-response-from-daemon-Get-https-registry-1-docker-io-v2-net-http-request-canceled-while-waiting-for-connection-Client-Timeout-exceeded-while-awaiting-headers">Error response from daemon: Get <code>&quot;https://registry-1.docker.io/v2/&quot;</code>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</h4>
<p>这种错误是因为国内把docker的官方源墙了，所以访问不了。</p>
<p>开始换源</p>
<p>而后进入/etc/docker修改daemon.json，如果没有这个json文件就新建一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/docker</span><br><span class="line"># 查看有没有daemon.json文件</span><br><span class="line">ls</span><br><span class="line"># 如果没有就新建</span><br><span class="line">touch daemon.json</span><br></pre></td></tr></table></figure>
<p>编辑daemon.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi daemon.json</span><br><span class="line"># 添加以下配置</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:[</span><br><span class="line">        &quot;https://docker.1panel.live&quot;,</span><br><span class="line">        &quot;https://hub.rat.dev&quot;,</span><br><span class="line">        &quot;https://docker.registry.cyou&quot;,</span><br><span class="line">        &quot;https://docker-cf.registry.cyou&quot;,</span><br><span class="line">        &quot;https://dockercf.jsdelivr.fyi&quot;,</span><br><span class="line">        &quot;https://docker.jsdelivr.fyi&quot;,</span><br><span class="line">        &quot;https://dockertest.jsdelivr.fyi&quot;,</span><br><span class="line">        &quot;https://docker.nju.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,</span><br><span class="line">        &quot;https://mirror.iscas.ac.cn&quot;,</span><br><span class="line">        &quot;https://docker.rainbond.cc&quot;,</span><br><span class="line">        &quot;https://dockerhub.icu&quot;,</span><br><span class="line">        &quot;https://hub.uuuadc.top&quot;,</span><br><span class="line">        &quot;https://docker.anyhub.us.kg&quot;,</span><br><span class="line">        &quot;https://docker.awsl9527.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后重启docker即可，上面的那些源有可能某些失效了，视情况绝对是否删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure>
<h4 id="Job-for-docker-service-failed-because-start-of-the-service-was-attempted-too-often-See-“systemctl-status-docker-service”-and-“journalctl-xe”-for-details-To-force-a-start-use-“systemctl-reset-failed-docker-service”-followed-by-“systemctl-start-docker-service”-again">Job for docker.service failed because start of the service was attempted too often. See “systemctl status docker.service” and “journalctl -xe” for details. To force a start use “systemctl reset-failed docker.service” followed by “systemctl start docker.service” again.</h4>
<p>这个错误有可能是daemon.json文件里面可能有语法错误导致启动不了，检查这个文件哪里写错了。</p>
<h4 id="Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</h4>
<p>这个错误是没有启动docker，启动一下就行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<h4 id="Warning-docker-service-changed-on-disk-Run-‘systemctl-daemon-reload’-to-reload-units">Warning: docker.service changed on disk. Run ‘systemctl daemon-reload’ to reload units.</h4>
<p>根据提示执行命令即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安装</category>
        <category>使用</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 的安装与配置 - 2</title>
    <url>/2024/08/18/202408181522/</url>
    <content><![CDATA[<p>右键标签栏，点击设置</p>
<p><img src="1.png" alt=""></p>
<p>选择 CD/DVD，选择下载好的ISO镜像，点击确定</p>
<p><img src="2.png" alt=""></p>
<p>开机！</p>
<p><img src="3.png" alt=""></p>
<p>开机之后，用方向键选择 Install Centos7 选项，按回车确认</p>
<p><img src="4.png" alt=""></p>
<p>选择语言</p>
<p><img src="5.png" alt=""></p>
<p>下滑选择安装位置</p>
<p><img src="6.png" alt=""></p>
<p>不会配置的选下面的自动配置分区，而后点击完成</p>
<p><img src="7.png" alt=""></p>
<p>配置安装源</p>
<p><img src="8.png" alt=""></p>
<p>如果配置是灰色的话，就像这样，就是没有连接网络，需要先连一下网络</p>
<p>点击完成回到刚才的页面</p>
<p><img src="9.png" alt=""></p>
<p>点击网络和主机名</p>
<p><img src="10.png" alt=""><br>
<img src="11.png" alt=""></p>
<p>连接到网络后，再次配置安装源，将安装源设置为国内的。</p>
<p><a href="http://mirrors.aliyun.com/centos/7/os/x86_64/">http://mirrors.aliyun.com/centos/7/os/x86_64/</a></p>
<p><img src="12.png" alt=""></p>
<p>软件选择</p>
<p><img src="13.png" alt=""></p>
<p>这里我选择的是最小安装，方便学习和记录</p>
<p><img src="14.png" alt=""><br>
<img src="15.png" alt=""></p>
<p>在安装过程中可以根据需求来判断是否设置root密码或者创建用户</p>
<p>我不需要创建用户，所以我没有创建</p>
<p>漫长的等待……</p>
<p><img src="16.png" alt=""></p>
<p>Centos7！启动！！</p>
<p><img src="17.png" alt=""></p>
<p>输入你的用户名和密码</p>
<p>没有创建用户的话就只有root用户</p>
<p><img src="18.png" alt=""></p>
<p>这样就装好了~</p>
<p><img src="19.png" alt=""></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas 库的使用</title>
    <url>/2024/08/24/202408240914/</url>
    <content><![CDATA[<p>本文按照pandas文档来总结的，如果有错误的地方，欢迎指正<br>
<a href="https://pandas.ac.cn/docs/">https://pandas.ac.cn/docs/</a></p>
<h3 id="安装-pandas">安装 pandas</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>
<h3 id="导入-pandas">导入 pandas</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br></pre></td></tr></table></figure>
<h3 id="读取表格或数据库">读取表格或数据库</h3>
<p>数据库以MySQL为例</p>
<p>支持相对路径，绝对路径，网络路径</p>
<p>读取操作返回DataFrame</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 在读取的时候添加parse_dates=[&quot;列名&quot;]，可使这个列变为Timestamp类型</span><br><span class="line"></span><br><span class="line"># 读取csv表格文件</span><br><span class="line">pd.read_csv(&quot;data.csv&quot;)</span><br><span class="line"></span><br><span class="line"># 读取xlsx或者xls表格文件</span><br><span class="line">pd.read_excel(&quot;data.xlsx&quot;)</span><br><span class="line"></span><br><span class="line"># 读取MySQL</span><br><span class="line"># 首先创建数据库连接对象</span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=&quot;localhost&quot;, # 数据库地址</span><br><span class="line">    port=3306, # 数据库端口</span><br><span class="line">    user=&quot;root&quot;, # 登录用户名</span><br><span class="line">    password=&quot;123456&quot;, # 登录密码</span><br><span class="line">    database=&quot;example&quot;, # 数据库名称</span><br><span class="line">    charset=&quot;utf8&quot; # 编码格式</span><br><span class="line">)</span><br><span class="line">#执行sql操作</span><br><span class="line"># %s 是占位符, index_col 是索引字段,可以是字符串也可以是列表</span><br><span class="line">sql = &quot;select * from user limit %s,%s&quot;</span><br><span class="line">pd.read_sql(sql,con=conn,params=[10,20],index_col=[&quot;id&quot;,&quot;type&quot;])</span><br></pre></td></tr></table></figure>
<h3 id="写入表格">写入表格</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 写 csv 文件</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># 读取read.csv表格</span><br><span class="line">data_read = pd.read_csv(&quot;read.csv&quot;)</span><br><span class="line"># 将read.csv表格写入到write.csv表格,并去除索引,在写入时不能打开write.csv</span><br><span class="line">data_read.to_csv(&quot;write.csv&quot;,index=False) </span><br><span class="line"></span><br><span class="line"># 将read.csv表格写入到write.txt文件里，并设置分割方式，去除索引,在写入时不能打开write.txt</span><br><span class="line">data_read.to_csv(&quot;write.txt&quot;,sep=&quot;\t&quot;,index=False)</span><br><span class="line"></span><br><span class="line"># 将read.csv表格写入到write.xlsx表格,并去除索引,在写入时不能打开write.xlsx</span><br><span class="line">data_read.to_excel(&quot;write.xlsx&quot;,index=False)</span><br></pre></td></tr></table></figure>
<h3 id="选择-DataFrame-的子集">选择 DataFrame 的子集</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(&quot;data.csv&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="选择数值列">选择数值列</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure>
<h4 id="选择特定列">选择特定列</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 选择Age列</span><br><span class="line">ages = data[&quot;Age&quot;]</span><br><span class="line">ages.head()</span><br><span class="line"></span><br><span class="line"># 选择Name列和Age列</span><br><span class="line">name_age = data[[&quot;Name&quot;,&quot;Age&quot;]]</span><br><span class="line">name_age.head()</span><br></pre></td></tr></table></figure>
<h4 id="选择特定行">选择特定行</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 筛选年龄超过35岁的乘客</span><br><span class="line"># data[&quot;Age&quot;] &gt; 35 将判断每一条数据的Age字段是否大于35</span><br><span class="line">ages = data[data[&quot;Age&quot;] &gt; 35]</span><br><span class="line">ages.head()</span><br><span class="line"></span><br><span class="line"># 筛选泰坦尼克号 2 等舱和 3 等舱的乘客</span><br><span class="line"># 第一种写法</span><br><span class="line">class_23 = data[data[&quot;class&quot;].isin([2,3])]</span><br><span class="line"># 第二种写法</span><br><span class="line"># 注: 不能用 or/and,需要用or运算符 | 和and运算符 &amp;</span><br><span class="line">class_23 = data[(data[&quot;class&quot;] == 2) | (data[&quot;class&quot;] == 3)]</span><br><span class="line">class_23.head()</span><br><span class="line"></span><br><span class="line"># 获取已知年龄的乘客数据</span><br><span class="line">ages_no_na = data[data[&quot;Age&quot;].notna()]</span><br><span class="line">ages_no_na.head() </span><br></pre></td></tr></table></figure>
<h4 id="选择特定的行和列">选择特定的行和列</h4>
<p>需要在选择括号 [] 前面使用 loc/iloc 运算符。使用 loc/iloc 时，逗号前面的部分是要选择的行，逗号后面的部分是要选择的列</p>
<p>loc是基于行标签和列标签进行索引的，基本用法为 DataFrame.loc[行标签,列标签]<br>
iloc是基于行和列的位置进行索引的，索引从0开始，基本用法为 DataFrame.iloc[行位置,列位置]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 年龄大于35岁的乘客的姓名</span><br><span class="line">names = data.loc[data[&quot;Age&quot;] &gt; 35,&quot;Name&quot;]</span><br><span class="line">names.head()</span><br><span class="line"></span><br><span class="line"># 获取第十行到30行的数据</span><br><span class="line">datas = data.iloc[9,30]</span><br><span class="line">datas.head()</span><br></pre></td></tr></table></figure>
<h3 id="从现有列创建新列">从现有列创建新列</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(&quot;data.csv&quot;)</span><br><span class="line"></span><br><span class="line"># 创建Age2列，值为Age列的2倍</span><br><span class="line">data[&#x27;Age2&#x27;] = data[&#x27;Age&#x27;] * 2</span><br></pre></td></tr></table></figure>
<h3 id="修改列名称">修改列名称</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(&quot;data.csv&quot;)</span><br><span class="line"></span><br><span class="line">data.rename(</span><br><span class="line">    columns=&#123;</span><br><span class="line">        &quot;现有列名称&quot;:&quot;新名称&quot;,</span><br><span class="line">        &quot;Age&quot;:&quot;年龄&quot;,</span><br><span class="line">        &quot;name&quot;:&quot;姓名&quot;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 也可以映射</span><br><span class="line">data.rename(columns=str.lower)</span><br></pre></td></tr></table></figure>
<h3 id="计算汇总统计量">计算汇总统计量</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">data = pd.read_csv(&quot;data.csv&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="平均值">平均值</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&quot;Age&quot;].mean()</span><br></pre></td></tr></table></figure>
<h4 id="中位数">中位数</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data[&quot;Price&quot;].median()</span><br></pre></td></tr></table></figure>
<h4 id="特定组合">特定组合</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.agg(</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Age&quot;: [&quot;min&quot;,&quot;max&quot;,&quot;median&quot;,&quot;skew&quot;],</span><br><span class="line">        &quot;Fare&quot;: [&quot;min&quot;,&quot;max&quot;,&quot;median&quot;,&quot;mean&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="按类别分组的汇总统计量">按类别分组的汇总统计量</h4>
<p>1、男性和女性泰坦尼克号乘客的平均年龄是多少？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 先查询出Sex字段和Age字段的数据，然后将数据根据Sex分组，最后求年龄的平均值</span><br><span class="line">data[[&#x27;Sex&#x27;,&#x27;Age&#x27;]].groupby(&quot;Sex&quot;).mean()</span><br><span class="line"></span><br><span class="line"># 如果没有显式的选择Sex和Age两列，那么就需要使用numeric_only=True应用包含数值列的每一项</span><br><span class="line">data.groupby(&quot;Sex&quot;).mean(numeric_only=True)</span><br><span class="line"></span><br><span class="line"># 也可以对分组数据的列选择</span><br><span class="line">data.groupby(&quot;Sex&quot;)[&#x27;Age&#x27;].mean()</span><br></pre></td></tr></table></figure>
<p>2、每个性别和客舱等级组合的平均票价是多少？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.groupby([&quot;Sex&quot;,&quot;Pclass&quot;])[&#x27;Fare&#x27;].mean()</span><br></pre></td></tr></table></figure>
<h4 id="按类别统计记录数">按类别统计记录数</h4>
<p>1、每个客舱等级有多少乘客？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># value_counts是一个快捷方式，它实际上是分组操作与每个组内记录数的计数相结合</span><br><span class="line"># 两个相同</span><br><span class="line">data[&#x27;Pclass&#x27;].value_counts()</span><br><span class="line">data.groupby(&quot;Pclass&quot;)[&#x27;Pclass&#x27;].count()</span><br><span class="line"></span><br><span class="line"># size 和 count 都可以与 groupby 结合使用。而 size 包含 NaN 值，只提供行数（表格的大小），count 排除缺失值。在 value_counts 方法中，使用 dropna 参数来包含或排除 NaN 值。</span><br><span class="line">data.groupby(&quot;Pclass&quot;)[&#x27;Pclass&#x27;].size()</span><br></pre></td></tr></table></figure>
<h3 id="排序">排序</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 根据Age进行排序</span><br><span class="line"># 基本用法: sort_values(by,axis,ascending,inplace,kind,na_position)</span><br><span class="line"># by: 根据哪一列排序,可以为一个列表</span><br><span class="line"># axis: 轴来指导排序</span><br><span class="line"># ascending: 如果为真，按升序排序，否则按降序排序</span><br><span class="line"># inplace: 如果为真，就地执行操作</span><br><span class="line"># kind: 选择排序算法</span><br><span class="line"># na_position: 参数&#x27;first&#x27;将NaNs放在开头，&#x27;last&#x27;将NaNs放在结尾</span><br><span class="line">titanic.sort_values(by=&quot;Age&quot;).head()</span><br><span class="line"># sort_index和sort_value基本相似,只是一个按索引排序，一个按字段排序</span><br></pre></td></tr></table></figure>
<h3 id="数据重塑">数据重塑</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># pivot(data,columns,index,values)</span><br><span class="line"># data: 数据帧</span><br><span class="line"># columns: str | object | str列表，用于创建新框架的列的列</span><br><span class="line"># index: str | object | str列表，可选，用于创建新帧索引的Column，如果未给出，则使用现有索引</span><br><span class="line"># values: str、对象或上一个列表，可选，用于填充新帧值的列，如果不指定，则将使用所有剩余列，结果将具有分层索引列</span><br><span class="line"># 返回重塑的DataFrame</span><br><span class="line">data.pivot()</span><br></pre></td></tr></table></figure>
<h3 id="透视表">透视表</h3>
<p>在 pivot() 的情况下，数据只是重新排列。当需要聚合多个值时，可以使用 pivot_table()，它提供一个聚合函数（例如平均值）来组合这些值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.pivot_table(values=&quot;value&quot;, index=&quot;location&quot;, columns=&quot;parameter&quot;, aggfunc=&quot;mean&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="创建新索引">创建新索引</h3>
<p>reset_index()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data.pivot(columns=&quot;location&quot;, values=&quot;value&quot;).reset_index()</span><br></pre></td></tr></table></figure>
<h3 id="合并">合并</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data1 = pd.read_csv(&quot;data1.csv&quot;)</span><br><span class="line">data2 = pd.read_csv(&quot;data2.csv&quot;)</span><br><span class="line">pd.concat([data1,data2],axis=0)</span><br></pre></td></tr></table></figure>
<h3 id="merge">merge</h3>
<p>基本用法: merge(left,right,how,on,left_on,right_on,left_index,right_index,sort,suffixes,copy,indicator,validate)</p>
<p>详细解释见: <a href="https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge">https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge</a></p>
<h3 id="时间序列数据">时间序列数据</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pd.to_datetime(data[&quot;datetime&quot;])</span><br></pre></td></tr></table></figure>
<h3 id="操作文本">操作文本</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将Name字段的所有内容全部转为小写</span><br><span class="line">data[&#x27;Name&#x27;].str.lower</span><br><span class="line"></span><br><span class="line"># 分割Name字段的所有内容</span><br><span class="line">data[&#x27;Name&#x27;].str.split(&quot;,&quot;)</span><br><span class="line"></span><br><span class="line"># 基本用法: contains(pat,case,flags,na,regex)</span><br><span class="line"># pat: 字符串或正则</span><br><span class="line"># case: 是否区分大小写，默认True</span><br><span class="line"># flags: 默认0，传递给 re 模块的标志，例如 re.IGNORECASE 的 CASE。</span><br><span class="line"># na: 可选,默认对空值不处理，即输出结果还是nan</span><br><span class="line"># 文本包含,是否包含Countess字符串，包含返回True，不包含返回False，NaN返回NaN</span><br><span class="line">data[&#x27;Name&#x27;].str.contains(&quot;Countess&quot;)</span><br><span class="line"></span><br><span class="line"># 获取Name长度</span><br><span class="line">data[&#x27;Name&#x27;].str.len()</span><br><span class="line"></span><br><span class="line"># 获取名字最长的那一个Name</span><br><span class="line">data.loc[data[&#x27;Name&#x27;].str.idxmax(),&quot;Name&quot;]</span><br><span class="line"></span><br><span class="line"># 替换，将“male”的值替换为“M”，将“female”的值替换为“F”。</span><br><span class="line">data[&#x27;Name&#x27;].replace(&#123;&quot;male&quot;: &quot;M&quot;, &quot;female&quot;: &quot;F&quot;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>202409051655</title>
    <url>/2024/09/05/202409051655/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
