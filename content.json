{"meta":{"title":"Best","subtitle":"个人博客","description":"这是我个人搭建的一个博客","author":"王飞腾","url":"https://bestflyteng.github.io","root":"/"},"pages":[{"title":"about","date":"2024-08-16T08:42:01.000Z","updated":"2024-08-18T10:04:57.154Z","comments":true,"path":"about/index.html","permalink":"https://bestflyteng.github.io/about/index.html","excerpt":"","text":"about"},{"title":"archives","date":"2024-08-16T07:58:09.000Z","updated":"2024-08-16T08:17:29.000Z","comments":true,"path":"archives/index.html","permalink":"https://bestflyteng.github.io/archives/index.html","excerpt":"","text":"acive"},{"title":"categories","date":"2024-08-16T07:59:09.000Z","updated":"2024-08-16T11:45:28.000Z","comments":true,"path":"categories/index.html","permalink":"https://bestflyteng.github.io/categories/index.html","excerpt":"","text":""},{"title":"friend","date":"2024-08-18T09:30:02.000Z","updated":"2024-08-18T10:05:03.894Z","comments":true,"path":"friend/index.html","permalink":"https://bestflyteng.github.io/friend/index.html","excerpt":"","text":"friend"},{"title":"search","date":"2024-08-16T08:54:21.000Z","updated":"2024-08-16T08:54:32.000Z","comments":true,"path":"search/index.html","permalink":"https://bestflyteng.github.io/search/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-08-16T07:51:58.000Z","updated":"2024-08-16T08:51:55.000Z","comments":true,"path":"tags/index.html","permalink":"https://bestflyteng.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"pandas 库的使用","slug":"202408240914","date":"2024-08-24T01:14:00.000Z","updated":"2024-08-24T06:46:52.244Z","comments":true,"path":"2024/08/24/202408240914/","permalink":"https://bestflyteng.github.io/2024/08/24/202408240914/","excerpt":"","text":"本文按照pandas文档来总结的，如果有错误的地方，欢迎指正 https://pandas.ac.cn/docs/ 安装 pandas 1pip install pandas 导入 pandas 1import pandas as pd 读取表格或数据库 数据库以MySQL为例 支持相对路径，绝对路径，网络路径 读取操作返回DataFrame 12345678910111213141516171819202122232425import pandas as pdimport pymysql# 在读取的时候添加parse_dates=[&quot;列名&quot;]，可使这个列变为Timestamp类型# 读取csv表格文件pd.read_csv(&quot;data.csv&quot;)# 读取xlsx或者xls表格文件pd.read_excel(&quot;data.xlsx&quot;)# 读取MySQL# 首先创建数据库连接对象conn = pymysql.connect( host=&quot;localhost&quot;, # 数据库地址 port=3306, # 数据库端口 user=&quot;root&quot;, # 登录用户名 password=&quot;123456&quot;, # 登录密码 database=&quot;example&quot;, # 数据库名称 charset=&quot;utf8&quot; # 编码格式)#执行sql操作# %s 是占位符, index_col 是索引字段,可以是字符串也可以是列表sql = &quot;select * from user limit %s,%s&quot;pd.read_sql(sql,con=conn,params=[10,20],index_col=[&quot;id&quot;,&quot;type&quot;]) 写入表格 12345678910111213# 写 csv 文件import pandas as pd# 读取read.csv表格data_read = pd.read_csv(&quot;read.csv&quot;)# 将read.csv表格写入到write.csv表格,并去除索引,在写入时不能打开write.csvdata_read.to_csv(&quot;write.csv&quot;,index=False) # 将read.csv表格写入到write.txt文件里，并设置分割方式，去除索引,在写入时不能打开write.txtdata_read.to_csv(&quot;write.txt&quot;,sep=&quot;\\t&quot;,index=False)# 将read.csv表格写入到write.xlsx表格,并去除索引,在写入时不能打开write.xlsxdata_read.to_excel(&quot;write.xlsx&quot;,index=False) 选择 DataFrame 的子集 12import pandas as pddata = pd.read_csv(&quot;data.csv&quot;) 选择数值列 1data.describe() 选择特定列 1234567# 选择Age列ages = data[&quot;Age&quot;]ages.head()# 选择Name列和Age列name_age = data[[&quot;Name&quot;,&quot;Age&quot;]]name_age.head() 选择特定行 12345678910111213141516# 筛选年龄超过35岁的乘客# data[&quot;Age&quot;] &gt; 35 将判断每一条数据的Age字段是否大于35ages = data[data[&quot;Age&quot;] &gt; 35]ages.head()# 筛选泰坦尼克号 2 等舱和 3 等舱的乘客# 第一种写法class_23 = data[data[&quot;class&quot;].isin([2,3])]# 第二种写法# 注: 不能用 or/and,需要用or运算符 | 和and运算符 &amp;class_23 = data[(data[&quot;class&quot;] == 2) | (data[&quot;class&quot;] == 3)]class_23.head()# 获取已知年龄的乘客数据ages_no_na = data[data[&quot;Age&quot;].notna()]ages_no_na.head() 选择特定的行和列 需要在选择括号 [] 前面使用 loc/iloc 运算符。使用 loc/iloc 时，逗号前面的部分是要选择的行，逗号后面的部分是要选择的列 loc是基于行标签和列标签进行索引的，基本用法为 DataFrame.loc[行标签,列标签] iloc是基于行和列的位置进行索引的，索引从0开始，基本用法为 DataFrame.iloc[行位置,列位置] 1234567# 年龄大于35岁的乘客的姓名names = data.loc[data[&quot;Age&quot;] &gt; 35,&quot;Name&quot;]names.head()# 获取第十行到30行的数据datas = data.iloc[9,30]datas.head() 从现有列创建新列 12345import pandas as pddata = pd.read_csv(&quot;data.csv&quot;)# 创建Age2列，值为Age列的2倍data[&#x27;Age2&#x27;] = data[&#x27;Age&#x27;] * 2 修改列名称 12345678910111213import pandas as pddata = pd.read_csv(&quot;data.csv&quot;)data.rename( columns=&#123; &quot;现有列名称&quot;:&quot;新名称&quot;, &quot;Age&quot;:&quot;年龄&quot;, &quot;name&quot;:&quot;姓名&quot; &#125;)# 也可以映射data.rename(columns=str.lower) 计算汇总统计量 12import pandas as pddata = pd.read_csv(&quot;data.csv&quot;) 平均值 1data[&quot;Age&quot;].mean() 中位数 1data[&quot;Price&quot;].median() 特定组合 123456data.agg( &#123; &quot;Age&quot;: [&quot;min&quot;,&quot;max&quot;,&quot;median&quot;,&quot;skew&quot;], &quot;Fare&quot;: [&quot;min&quot;,&quot;max&quot;,&quot;median&quot;,&quot;mean&quot;] &#125;) 按类别分组的汇总统计量 1、男性和女性泰坦尼克号乘客的平均年龄是多少？ 12345678# 先查询出Sex字段和Age字段的数据，然后将数据根据Sex分组，最后求年龄的平均值data[[&#x27;Sex&#x27;,&#x27;Age&#x27;]].groupby(&quot;Sex&quot;).mean()# 如果没有显式的选择Sex和Age两列，那么就需要使用numeric_only=True应用包含数值列的每一项data.groupby(&quot;Sex&quot;).mean(numeric_only=True)# 也可以对分组数据的列选择data.groupby(&quot;Sex&quot;)[&#x27;Age&#x27;].mean() 2、每个性别和客舱等级组合的平均票价是多少？ 1data.groupby([&quot;Sex&quot;,&quot;Pclass&quot;])[&#x27;Fare&#x27;].mean() 按类别统计记录数 1、每个客舱等级有多少乘客？ 1234567# value_counts是一个快捷方式，它实际上是分组操作与每个组内记录数的计数相结合# 两个相同data[&#x27;Pclass&#x27;].value_counts()data.groupby(&quot;Pclass&quot;)[&#x27;Pclass&#x27;].count()# size 和 count 都可以与 groupby 结合使用。而 size 包含 NaN 值，只提供行数（表格的大小），count 排除缺失值。在 value_counts 方法中，使用 dropna 参数来包含或排除 NaN 值。data.groupby(&quot;Pclass&quot;)[&#x27;Pclass&#x27;].size() 排序 12345678910# 根据Age进行排序# 基本用法: sort_values(by,axis,ascending,inplace,kind,na_position)# by: 根据哪一列排序,可以为一个列表# axis: 轴来指导排序# ascending: 如果为真，按升序排序，否则按降序排序# inplace: 如果为真，就地执行操作# kind: 选择排序算法# na_position: 参数&#x27;first&#x27;将NaNs放在开头，&#x27;last&#x27;将NaNs放在结尾titanic.sort_values(by=&quot;Age&quot;).head()# sort_index和sort_value基本相似,只是一个按索引排序，一个按字段排序 数据重塑 1234567# pivot(data,columns,index,values)# data: 数据帧# columns: str | object | str列表，用于创建新框架的列的列# index: str | object | str列表，可选，用于创建新帧索引的Column，如果未给出，则使用现有索引# values: str、对象或上一个列表，可选，用于填充新帧值的列，如果不指定，则将使用所有剩余列，结果将具有分层索引列# 返回重塑的DataFramedata.pivot() 透视表 在 pivot() 的情况下，数据只是重新排列。当需要聚合多个值时，可以使用 pivot_table()，它提供一个聚合函数（例如平均值）来组合这些值。 1data.pivot_table(values=&quot;value&quot;, index=&quot;location&quot;, columns=&quot;parameter&quot;, aggfunc=&quot;mean&quot;) 创建新索引 reset_index() 1data.pivot(columns=&quot;location&quot;, values=&quot;value&quot;).reset_index() 合并 123data1 = pd.read_csv(&quot;data1.csv&quot;)data2 = pd.read_csv(&quot;data2.csv&quot;)pd.concat([data1,data2],axis=0) merge 基本用法: merge(left,right,how,on,left_on,right_on,left_index,right_index,sort,suffixes,copy,indicator,validate) 详细解释见: https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge 时间序列数据 1pd.to_datetime(data[&quot;datetime&quot;]) 操作文本 12345678910111213141516171819202122# 将Name字段的所有内容全部转为小写data[&#x27;Name&#x27;].str.lower# 分割Name字段的所有内容data[&#x27;Name&#x27;].str.split(&quot;,&quot;)# 基本用法: contains(pat,case,flags,na,regex)# pat: 字符串或正则# case: 是否区分大小写，默认True# flags: 默认0，传递给 re 模块的标志，例如 re.IGNORECASE 的 CASE。# na: 可选,默认对空值不处理，即输出结果还是nan# 文本包含,是否包含Countess字符串，包含返回True，不包含返回False，NaN返回NaNdata[&#x27;Name&#x27;].str.contains(&quot;Countess&quot;)# 获取Name长度data[&#x27;Name&#x27;].str.len()# 获取名字最长的那一个Namedata.loc[data[&#x27;Name&#x27;].str.idxmax(),&quot;Name&quot;]# 替换，将“male”的值替换为“M”，将“female”的值替换为“F”。data[&#x27;Name&#x27;].replace(&#123;&quot;male&quot;: &quot;M&quot;, &quot;female&quot;: &quot;F&quot;&#125;)","categories":[{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/tags/python/"}]},{"title":"安装并使用 docker-ce","slug":"202408191233","date":"2024-08-19T04:33:11.000Z","updated":"2024-08-24T07:22:15.993Z","comments":true,"path":"2024/08/19/202408191233/","permalink":"https://bestflyteng.github.io/2024/08/19/202408191233/","excerpt":"","text":"下载 从阿里云下载 docker-ce 仓库，并将仓库文件移动到 /etc/yum.repos.d/ 目录下 12sudo curl -O https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo mv docker-ce.repo /etc/yum.repos.d/ 刷新yum缓存 12sudo yum clean allsudo yum makecache fast 查看 docker-ce 源是否添加成功 1yum list docker-ce 安装 安装 docker-ce 1sudo yum install docker-ce -y 执行命令查看是否安装成功 1docker info 如果出现这种错误，说明没有运行 docker 的启动与停止 12345678910111213# 启动 dockerservice docker start# 守护进程重启systemctl daemon-reload# 重启 docker 服务(二选其一即可)systemctl restart dockerservice docker restart# 关闭 docker (二选其一即可)systemctl stop dockerservice docker stop 常用docker命令 查看镜像 1docker images 搜索镜像 1docker search 镜像名称 拉取镜像 1docker pull 镜像名称 按镜像id删除镜像 1docker rmi 镜像id 删除所有镜像 1docker rmi $(docker images -q) 查看正在运行的容器 1docker ps 查看所有容器 1docker ps -a 查看最后一次运行的容器 1docker ps -l 查看停止的容器 1docker ps -f status=exited 创建容器 12345678910111213docker run -i：表示运行容器 -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。交互式 --name :为创建的容器命名。 -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。 -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。 -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射 创建并进入容器，退出停止(交互式) 1docker run -it --name=容器名称 镜像名称:标签 /bin/bash 退出当前容器 1exit 守护式创建容器 创建但不登陆 1docker run -di --name=容器名称 镜像名称:标签 创建并登陆 1docker exec -it 容器名称(或者容器id) /bin/bash 停止与启动容器 停止容器 1docker stop 容器名称(或者容器id) 启动容器 1docker start 容器名称(或者容器id) 文件拷贝 将文件拷贝到容器内 1docker cp 需要拷贝的文件或目录 容器名称:容器目录 将文件从容器内拷贝出来 1docker cp 容器名称:容器目录 需要拷贝的文件或目录 目录挂载 在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样就可以通过修改宿主机某个目录的文件从而去影响容器。创建容器添加-v参数 后边为 宿主机目录:容器目录，例如： 1docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos centos:7 迁移与备份 将容器保存为镜像 1docker commit 容器名称 镜像名称 将镜像保存为 tar 文件 1docker save -o image.tar 镜像名称 恢复镜像 12# 恢复之前先删除原有的镜像docker load -i image.tar 私有仓库搭建与配置 拉取私有仓库镜像 1docker pull registry 启动私有仓库容器 1docker run -di --name=registry -p 5000:5000 registry 打开浏览器，访问 http://宿主机ip:5000/v2/_catalog，返回{“repositories”:[]}表明私有仓库搭建成功，并且内容为空 修改daemon.json 1vi /etc/docker/daemon.json 添加或修改以下内容，而后保存退出，此步用于让 docker 信任私有仓库地址 1&#123;&quot;insecure-registries&quot;:[&quot;宿主机ip:5000&quot;]&#125; 重启docker服务 1systemctl restart docker 镜像上传至私有仓库 标记此镜像为私有仓库的镜像 1docker tag redis 宿主机ip:5000/redis 再次启动私有仓库 1docker start registry 上传标记的镜像到私有仓库 1docker push 宿主机ip:5000/redis 可能会出现的错误或警告 Warning: Stopping docker.service, but it can still be activated by: docker.socket 一般出现在停止docker运行的时候，原因是 Docker 在关闭状态下被访问自动唤醒机制，意味如果试图连接到 docker socket，而 docker 服务没有运行，系统将自动启动docker。 解决办法 方法1、(推荐) 1systemctl stop docker.socket 方法2、 删除docker.socket 1rm -f /lib/systemd/system/docker.socket Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 这种错误是因为国内把docker的官方源墙了，所以访问不了。 开始换源 而后进入/etc/docker修改daemon.json，如果没有这个json文件就新建一个 12345cd /etc/docker# 查看有没有daemon.json文件ls# 如果没有就新建touch daemon.json 编辑daemon.json 123456789101112131415161718192021vi daemon.json# 添加以下配置&#123; &quot;registry-mirrors&quot;:[ &quot;https://docker.1panel.live&quot;, &quot;https://hub.rat.dev&quot;, &quot;https://docker.registry.cyou&quot;, &quot;https://docker-cf.registry.cyou&quot;, &quot;https://dockercf.jsdelivr.fyi&quot;, &quot;https://docker.jsdelivr.fyi&quot;, &quot;https://dockertest.jsdelivr.fyi&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;, &quot;https://mirror.iscas.ac.cn&quot;, &quot;https://docker.rainbond.cc&quot;, &quot;https://dockerhub.icu&quot;, &quot;https://hub.uuuadc.top&quot;, &quot;https://docker.anyhub.us.kg&quot;, &quot;https://docker.awsl9527.cn&quot; ]&#125; 然后重启docker即可，上面的那些源有可能某些失效了，视情况绝对是否删除。 1service docker restart Job for docker.service failed because start of the service was attempted too often. See “systemctl status docker.service” and “journalctl -xe” for details. To force a start use “systemctl reset-failed docker.service” followed by “systemctl start docker.service” again. 这个错误有可能是daemon.json文件里面可能有语法错误导致启动不了，检查这个文件哪里写错了。 Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? 这个错误是没有启动docker，启动一下就行了 1systemctl start docker Warning: docker.service changed on disk. Run ‘systemctl daemon-reload’ to reload units. 根据提示执行命令即可 1systemctl daemon-reload","categories":[{"name":"安装","slug":"安装","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/"},{"name":"使用","slug":"安装/使用","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/"},{"name":"配置","slug":"安装/使用/配置","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"docker","slug":"docker","permalink":"https://bestflyteng.github.io/tags/docker/"}]},{"title":"换 yum 源","slug":"202408191114","date":"2024-08-19T03:14:54.000Z","updated":"2024-08-19T04:39:21.114Z","comments":true,"path":"2024/08/19/202408191114/","permalink":"https://bestflyteng.github.io/2024/08/19/202408191114/","excerpt":"","text":"备份原有源配置文件 1sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载国内源配置文件(这里用的是阿里云的仓库)，并移动到源目录里 12sudo curl -O http://mirrors.aliyun.com/repo/Centos-7.reposudo mv Centos-7.repo /etc/yum.repos.d/CentOS-Base.repo 刷新yum缓存 12sudo yum clean allsudo yum makecache fast 检查是否更换成功 1sudo yum repolist 更新软件包 1yum -y update 至此，换源完成~","categories":[{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/tags/%E9%85%8D%E7%BD%AE/"},{"name":"config","slug":"config","permalink":"https://bestflyteng.github.io/tags/config/"},{"name":"yum","slug":"yum","permalink":"https://bestflyteng.github.io/tags/yum/"}]},{"title":"Centos7 的安装与配置 - 2","slug":"202408181522","date":"2024-08-18T07:22:07.000Z","updated":"2024-08-19T04:34:33.779Z","comments":true,"path":"2024/08/18/202408181522/","permalink":"https://bestflyteng.github.io/2024/08/18/202408181522/","excerpt":"","text":"右键标签栏，点击设置 选择 CD/DVD，选择下载好的ISO镜像，点击确定 开机！ 开机之后，用方向键选择 Install Centos7 选项，按回车确认 选择语言 下滑选择安装位置 不会配置的选下面的自动配置分区，而后点击完成 配置安装源 如果配置是灰色的话，就像这样，就是没有连接网络，需要先连一下网络 点击完成回到刚才的页面 点击网络和主机名 连接到网络后，再次配置安装源，将安装源设置为国内的。 http://mirrors.aliyun.com/centos/7/os/x86_64/ 软件选择 这里我选择的是最小安装，方便学习和记录 在安装过程中可以根据需求来判断是否设置root密码或者创建用户 我不需要创建用户，所以我没有创建 漫长的等待…… Centos7！启动！！ 输入你的用户名和密码 没有创建用户的话就只有root用户 这样就装好了~","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://bestflyteng.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"}]},{"title":"Hexo 图片资源显示","slug":"202408181131","date":"2024-08-18T03:31:03.000Z","updated":"2024-08-24T07:21:07.979Z","comments":true,"path":"2024/08/18/202408181131/","permalink":"https://bestflyteng.github.io/2024/08/18/202408181131/","excerpt":"","text":"安装 hexo-renderer-markdown-it hexo-renderer-markdown-it官网 12345# 如果安装过 hexo-renderer-marked，就卸载npm un hexo-renderer-markednpm i hexo-renderer-markdown-it 修改_config.yml 将 post_asset_folder 改为true 重新生成静态文件，并运行 1hexo clean &amp; hexo g &amp; hexo server","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://bestflyteng.github.io/categories/Hexo/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://bestflyteng.github.io/tags/bug/"}]},{"title":"Centos7 的安装与配置 - 1","slug":"202408181002","date":"2024-08-18T02:02:23.000Z","updated":"2024-08-19T04:34:38.420Z","comments":true,"path":"2024/08/18/202408181002/","permalink":"https://bestflyteng.github.io/2024/08/18/202408181002/","excerpt":"","text":"下载镜像 以下内容仅按照我的配置写的，如有不足评论一下。 首先下载Centos7的镜像，这里我用的 阿里云的镜像 进入 7.9.2009/isos/x86_64/，下载 CentOS-7-x86_64-NetInstall-2009.iso 如果打开只有一个 readme 文件，说明这个版本的镜像没有提供下载。 安装 首先打开 VMware，创建新的虚拟机，这里安装到虚拟机里面 (物理机应该也是一样的) 选择自定义(高级)，然后下一步 这里选择稍后安装操作系统，然后下一步 这里选择Centos7 64位 这里可以给虚拟机起名字。 位置选C盘以外的盘，因为最后生成的虚拟机文件比较大(只有一个C盘当我没说…) 这里可以设置虚拟机的处理器(不懂别瞎选，默认的就行) 这里设置内存(不懂别瞎选，默认的就行) 这里建议选默认的 使用网络地址转换(NAT) 后面的默认推荐就可以 创建新虚拟磁盘，而后下一步 这里可以设置磁盘大小，也就是虚拟机的硬盘大小 选 将虚拟磁盘存储为单个文件，而后下一步 完成！","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://bestflyteng.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"}]},{"title":"MySQL的备份与恢复 (mysqldump)","slug":"202408170839","date":"2024-08-17T00:39:19.000Z","updated":"2024-08-19T02:18:15.162Z","comments":true,"path":"2024/08/17/202408170839/","permalink":"https://bestflyteng.github.io/2024/08/17/202408170839/","excerpt":"","text":"mysqldump 语法 1mysqldump [选项] 数据库名 [表名] &gt; 脚本.sql 选项 参数名 缩写 含义 --host -h 服务器IP地址 --port -P (大写) 服务器端口号 --password -p (小写) MySQL密码 --databases 指定要备份的数据库 --all-databases 备份MySQL服务器上的所有数据库 --compact 压缩模式，产生更少的输出 --comments 添加注释信息 --complete-insert 输出完成的插入语句 --lock-tables 备份前，锁定所有数据库表 --no-create-db/–no-create-info 禁止生成创建数据库语句 --force 当出现错误时仍然继续备份操作 --default-character-set 指定默认字符集 --add-locks 备份数据库表时锁定数据库表 示例 如果 -p 选项没有指定密码，那么控制台会等待输入密码 备份所有数据库 1mysqldump -uroot -p --all-databases &gt; all.sql 备份指定数据库 1mysqldump -uroot -p test &gt; test.sql 备份指定数据库指定表(多个表以空格间隔) 1mysqldump -uroot -p test table1 table2 &gt; test.sql 备份指定数据库排除某些表 1mysqldump -uroot -p test --ignore-table=test.table1 --ignore-table=test.table2 &gt; test.sql 恢复命令 命令行命令 123注：在导入备份数据库前，db_name如果没有，是需要创建的； 而且与db_name.sql中数据库名是一样的才可以导入。mysqladmin -uroot -p create db_name mysql -uroot -p db_name &lt; /backup/mysqldump/db_name.sql soure 方法 12mysql &gt; use db_namemysql &gt; source /backup/db_name.sql table th:nth-child(2){ width: 5rem; }","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/categories/MySQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://bestflyteng.github.io/tags/SQL/"},{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/tags/MySQL/"},{"name":"备份","slug":"备份","permalink":"https://bestflyteng.github.io/tags/%E5%A4%87%E4%BB%BD/"}]},{"title":"我的第一篇博客","slug":"202408162041","date":"2024-08-16T12:41:12.000Z","updated":"2024-08-17T03:47:37.000Z","comments":true,"path":"2024/08/16/202408162041/","permalink":"https://bestflyteng.github.io/2024/08/16/202408162041/","excerpt":"","text":"这是我的第一篇博客，我以后会在这里分享一些技术，生活或记录学习状况。 同时我也会吸取一些建议或意见，进行修正。","categories":[{"name":"分享","slug":"分享","permalink":"https://bestflyteng.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"记录","slug":"记录","permalink":"https://bestflyteng.github.io/tags/%E8%AE%B0%E5%BD%95/"}]}],"categories":[{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/categories/python/"},{"name":"安装","slug":"安装","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/"},{"name":"使用","slug":"安装/使用","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/"},{"name":"配置","slug":"安装/使用/配置","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AE/"},{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/categories/%E9%85%8D%E7%BD%AE/"},{"name":"操作系统","slug":"操作系统","permalink":"https://bestflyteng.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Hexo","slug":"Hexo","permalink":"https://bestflyteng.github.io/categories/Hexo/"},{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/categories/MySQL/"},{"name":"分享","slug":"分享","permalink":"https://bestflyteng.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/tags/python/"},{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"docker","slug":"docker","permalink":"https://bestflyteng.github.io/tags/docker/"},{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/tags/%E9%85%8D%E7%BD%AE/"},{"name":"config","slug":"config","permalink":"https://bestflyteng.github.io/tags/config/"},{"name":"yum","slug":"yum","permalink":"https://bestflyteng.github.io/tags/yum/"},{"name":"bug","slug":"bug","permalink":"https://bestflyteng.github.io/tags/bug/"},{"name":"SQL","slug":"SQL","permalink":"https://bestflyteng.github.io/tags/SQL/"},{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/tags/MySQL/"},{"name":"备份","slug":"备份","permalink":"https://bestflyteng.github.io/tags/%E5%A4%87%E4%BB%BD/"},{"name":"记录","slug":"记录","permalink":"https://bestflyteng.github.io/tags/%E8%AE%B0%E5%BD%95/"}]}